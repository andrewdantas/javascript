Boas Práticas na Programação:

1) Documentação
/**
 * Descrição do código (o que faz?)
 * @author Nome do autor do código
 * @link https://...
 */

2) Código limpo
- Não abusar de comentários

3) Nomeação:
   - Nãu usar caracteres especiais, espaço e acentos
   - Nomes de arquivos, varíaveis, funções devem ser escrito com a primeira letra em caixa baixa (letra minúscula), inicar com caixa alta (letra maiúscula) apenas em classes modelos
   - Definir nomes que tenham relação com o problema a ser resolvido 

4) alinhamento (identação do código)

5) Quanto menos código usado para o problema melhor!
 _____________________________________________________
 Comandos de Terminal

 cls ou clear (limpar a tela do terminal)
 node -v (exibe a versão do node)
 cd pasta (entrar na pasta)
 cd .. (voltar um nível)
 dir ou ls (listar or arquivos de diretórios)
 node arquivo.js (executar um arquivo JavaScript)
 seta pra cima (repete os comandos)
 <tab> completa o comando

______________________________________________________
VSCode: Dicas
Combinação de teclas 
    Alt + Shift + F //alinhamento do código
Mais Dicas: VS Code: Produtividade Infinita (repositório) 
 _____________________________________________________
JavaScript:

Características:
- Trabalha com sentenças e não linhas de código
- ; é opcioanal
console.clear() //limpar a tela do console
console.log() //escrever no console
//comentários de linhas
Podemos usar aspas " " ou ' '
Não podemos usar aspas diferentes " ' ou ' "
- Dicas: Usar em textos "aspas"
       Usar em bibliotecas ou caminhos 'apóstrofes'

______________________________________________________
Operadores

Observações:
- Regra da precedência
- % (não calcula porcentagem e sim o resto da divisão)
Ex:
    | 3 |
 10 |___|
  1   3


10 / 3 //3.33 
10 % 3 //resultado é 1

Comparadores de igualdade:
NÃO USAR == OU !=

Operadores lógicos:
Dica:
professorjosedeassis.github.io/simulador
______________________________________________________

Estudo das variáveis
- String (caracteres)
- Numéricas (números)
- Booleanas (verdadeiro ou falso)

Obs: No JS as variáveis são dinânicamente tipadas
const (criar uma constante)
var ou let (criar uma variável)
ATENÇÃO!!!! Não usar jamais o var

Tipagem dinânica:
No JavaScript o tipo string é definido quando o conteúdo da variável estiver entre aspas ""

Variáveis numéricas podem ser números inteiros e não inteiros
Obervação , (vírgula é um caractere e não número)
se necessário converter a entrada de dados de "," para "."
.replace(",",".")

Na entrada de dados numéricos via terminal ou formulário é necessário converter para números
classe Number

______________________________________________________
Git e GitHub

Configurando o git
- Instalar o git
Abrir o git bash
git config --global usar.name "seu nome"
git config --global user.email "seu email"

git clone link_do_repositório (clonar o repositório na máquina local)

Observações: digitar os comandos na raiz do repositório
git status (verifica o status do repositório local em relação ao GitHub)
git add . (adiciona todas as alterações)
git commit -m "descrição das alterações"

______________________________________________________
NODE - Plataforma para uso do JS fora do browser (navegador)
 |__ V8 (google chromium)
 |__ bibliotecas C / C++
 |__ pacotes npm (node packager manager)
 npm ls (lista os pacotes)
 npm i ou npm install (instala um pacote)
 npm r nome_do_pacote (remove o pacote)

 Pacote = Módulo = Bibliotecas
 Para usar um pacote é necessário fazer a importação no iníco do código (logo abaixo do cabeçalho de documentação)

 _____________________________________________________
Algorítmo: "receita de bolo"

Exemplo 1:
Objetivo: Calcular a média de 2 notas

            nota 1 + nota 2
média = _______________________
                   2

Variáveis: nota1, nota2, media

Entrada: nota1, nota2
Processamento: media = (nota1 + nota2) / 2
Saída: media

______________________________________________________
Exemplo 2:
Desenvolver um app modo console para calculo de porcentagem:
Ex: 10% de 200 = 20
     x      y     valor

Algorítmo: 

y   ---------- 100%
valor --------  x

valor * 100 = y * x

           y * x       
valor = ____________ 
            100     

valor = (x * y) / 100

//variáveis
x,y,valor

//Entrada
x,y

//Processamento
valor = (x * y) / 100

//Saída
valor

Exercício 1:
Desenvolver um app modo console para calcular o valor do desconto:
Ex:
valor total: 200.00
desconto: 5%
total com desconto: 190.00

valor com desconto = valor total - desconto

//variáveis
total, desconto,valor,totaldesconto

//Entrada
total, desconto

//Processamento 1
valor = (desconto * total) / 100

//Saída 1
valor

//Processamento 2
totaldesconto = total - valor

//Saída
totaldesconto

______________________________________________________
Exercício 2: Desenvolver um app no console para conversão de moeda (real para euro)

cotação: 5,89

Ex:
Valor do real: R$ 10,00
Valor do euro: E$ 1,70

//variáveis
real,euro,total

//Entrada
real,euro

//Processamento
total = real / euro

//Saída
total

______________________________________________________
Exercício 3: Calcular o desconto do vale transporte

//variáveis
salario, vt, totaldesconto

//entrada
salario, vt

//Processamento 1
totaldesconto = (salario * vt) / 100

//Saída
totaldesconto

//Processamento 2
salario = totaldesconto - salario

____________________________________________________
Estruras de controle

condicionais
if if-else (encadeamento/aninhamento else-if) switch-case

repetições:
for while do-while

if (condição) {
    //condição verdadeira
}

if (condição) {
    //condição verdadeira
} else {
    //condição falsa
}

Observações:
1) Sempre uma resposta será exibida independente da condição
2) Não pode existir uma condição verdadeira e fala ao mesmo tempo

Exemplo de uso da estrutura else-if
No exemplo cálculo da média estabelecer as seguintes condições
1) Se o aluno tiver média menor que 2 (REPROVADO)
2) Se a média do aluno estive entre 2 (inclusive) e 5 (não incluir o 5) (RECUPERAÇÂO)
3) Se a média for igual ou superior a 5 (APROVADO)

Resumindo:
if (condição 1) {
    //condição 1 verdadeira
} else if (condição 2) {
    //condição 2 verdadeira
} else if (condição 3) {
    //condição 3 verdadeira
} else {
    //nenhuma das condições é verdadeiras
}

Obs: O else final não é obrigatório

Exercício 3:
No Brasil, o voto pode ser proibido, obrigatório ou facultativo de acordo com os seguintes critérios:

idade menor que 16 (proibido votar)
idade  entre 18 e 70 (incluindo 18 e 70) (voto obrigatório)
16,17 ou acima de 70 (voto é opcioanal)

Desenvolva no console do JS um app para verificar em função da idade a obrigação ou não de votar.

______________________________________________________
Estrtura de controle condicional: switch-case
Sintaxe:
variável (número inteiro ou letra)
switch (variável) {
    case: 1
       //código se o valor da variável for igual a 1
       break
    case: 2
       //código se o valor da variável for igual a 2
       break
    default:
       //código caso o valor diferente de 1 ou 2
       break
}

______________________________________________________
Exercício 4: Desenvolva no console do JS um aplicativo que faça o sorteio de um jogo de dado, ao

⚀
⚁
⚂
⚃
⚄
⚅

Estruturas de controle - laços de repetição

for
while
do-while

for - estrutura de repetição finitas (determinada)
for (let 1 = i condição; incremento/decremento) {
    //iníco ; repetir enquanto a condição verdadeira, i++ ou i--
}

//observação: a variável declarada dentro da estrutura deve ser um número inteiro

while do-while - estruturas de repetições Infinitas


while (condição) {
    // analisa a condição e executa o código enquantoa a condição for verdadeira 
}

do {
    // sempre executa o código uma vez independenteda condição depois se comporta com while
} while (condição)

Exercício 6:
Desenvolver um aplicativo para calcular a tabuada, semelhante ao exemplo de aula usando a estrutura while no lugar

______________________________________________________
Funções
Uma função em JavaScript é um bloco de código que realiza uma tarefa específica ou calcula um valor. Você pode pensar nela como uma "receita" que você escreve uma vez e pode usar várias vezes, sem precisar reescrever o código

Nomeie funções de acrodo com o problema a ser resolvido
Use "verbos" para nomear funções. Ex: calcular() cadastrar()

Para criar uma função simples (literal) usamos a palavra reservada function, e escolhemos um nom, conforme a sintaxe abaixo:

function nome() {
    //código
}

Para executar uma função devemos escrever o nome da função seguido de parênteses:
nome()

//variáveis
Tipos primitivos; string, number, boolean
Outros tipos: function, object

// Funções em JavaScript

- literais (nome)

- atribuídas (variável) "Funcão anônima"
São funções atribuídas a uma constante ou variável onde o resultado do processsamento da função é armazenado e pode ser utilizado, além disso funções atribuídas podem ser simplificadas
(arrow function)

Atividade 3 (Avaliação em dupla)
Desenvolver uma calculadora no console usando funções, conforme modelo abaixo:

Calculadora:
Digite o primeiro número: 10
Digite o segundo número: 2

Opções:
1. Somar
2. Subtrair
3. Multiplicar
4. Dividir
5. Calcular a porcentagem

Digite a opção desejada: 3
A multiplicação de 10 x 2 = 20

______________________________________________________
POO

- Abstração (classe modelo)
- Herança
- Polimorfismo

- Encapsulamento (segurança)
Slide de apoio: (49 a 60)
https://professorjosedeassis.github.io/javaSE

Obs: Para criar uma classe modelo usamos uma letra maiúscula no ínicio

No JS a classe modelo é uma função

Sempre que existir a palavra new um objeto é criado (instanciado)

O ponto após o objeto é usado para acessar os recursos (atributos e métodos) da classe modelo

Polimorfismo:
ATENÇÃO!!! Para reescrever um método é necessário usar o "MESMO" nome do método original

Atividade 4: Avaliação individual
Slides 16 a 20 (POO Exercício 1 - carros)

Encapsulamento:
- Reforço na segurança dos atributos (variáveis)
Dica: get e set (acesso a variável encapsulada)

______________________________________________________

Array (vetor)
Na linguage JavaScript array é um objeto

Array multidimensional (matriz)
É um array que contém outro(s) array(s)

